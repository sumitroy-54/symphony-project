{"version":3,"sources":["components/json_view/details.jsx","components/utils.js","components/login/login.jsx","App.js","serviceWorker.js","index.js"],"names":["Details","props","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","alert","onerror","onload","binaryStr","result","setState","entered_json","JSON","parse","readAsText","onExpandedChange","newExpanded","expanded","state","added_members_data","this","map","data","index","push","date","inventory","model","city","City","total_leads","total_sales","total_cash","discount","className","accept","getRootProps","getInputProps","filterable","pivotBy","columns","Header","headerClassName","id","accessor","d","pivot","defaultPageSize","showPageSizeOptions","sortable","resizable","column","ReactTableDefaults","headerStyle","outline","Component","Login","responseGoogle","response","showUploadPage","authFailed","console","log","clientId","buttonText","onSuccess","onFailure","cookiePolicy","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31cf28fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTable, { ReactTableDefaults } from 'react-table';\nimport Dropzone from 'react-dropzone';\nimport 'react-table/react-table.css';\nimport {DRAG_DROP_TEXT} from '../utils';\nimport './details.scss';\n\nclass Details extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            entered_json: null\n        }\n    }\n\n    onDrop = (acceptedFiles) => {\n        acceptedFiles.forEach((file) => {\n            const reader = new FileReader()\n      \n            reader.onabort = () => alert('file reading was aborted')\n            reader.onerror = () => alert('file reading has failed')\n            reader.onload = () => {\n            // Reading contents of file\n              const binaryStr = reader.result\n              this.setState({entered_json: JSON.parse(binaryStr)})\n            }\n            reader.readAsText(file)\n          });\n      }\n\n    onExpandedChange=(newExpanded)=> {\n        this.setState({\n          expanded: newExpanded\n        });\n      }\n    render() {\n        const columns = [\n            {\n              Header: 'Date',\n              headerClassName: 'table-header',\n              id: 'date',\n              accessor: d => d.date,\n              pivot: true\n              \n            },\n            {\n              Header: 'Inventory',\n              headerClassName: 'table-header',\n              id: 'inventory',\n              pivot: true,\n              accessor: d => d.inventory\n            },\n            {\n              Header: 'Model',\n              headerClassName: 'table-header',\n              id: 'model',\n              accessor: d => d.model\n            },\n            {\n              Header: 'City',\n              headerClassName: 'table-header',\n              accessor: 'city',\n              id: 'city',\n            },\n            {\n                Header: 'Total Leads',\n                headerClassName: 'table-header',\n                accessor: 'total_leads',\n            },\n            {\n                Header: 'Total Sales',\n                headerClassName: 'table-header',\n                accessor: 'total_sales',\n            },\n            {\n                Header: 'Total Cash',\n                headerClassName: 'table-header',\n                accessor: 'total_cash',\n            },\n            {\n                Header: 'Average Discount',\n                headerClassName: 'table-header',\n                accessor: 'discount',\n            },\n\n          ];\n\n          let added_members_data = [];\n\n          if (this.state.entered_json) {\n            this.state.entered_json.map((data, index) => {\n              added_members_data.push({\n                date: data.date,\n                inventory: data.inventory,\n                model: data.model,\n                city: data.City,\n                total_leads: data.total_leads,\n                total_sales: data.total_sales,\n                total_cash: data.total_cash,\n                discount: data.discount,\n                \n              });\n            });\n          }\n        return (\n            <div>\n                <div className=\"details\">\n\n                    <div className=\"container\">\n                    <Dropzone onDrop={this.onDrop} accept=\".json\" className=\"drag-drop\">\n                    {({getRootProps, getInputProps}) => (\n                        <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {DRAG_DROP_TEXT}\n                        </div>\n                    )}\n                    \n                    </Dropzone>\n                    </div>\n                \n                </div>\n                {this.state.entered_json?\n                    <div className=\"table\">\n                         <ReactTable\n                            data={added_members_data}\n                            filterable={false}\n                            pivotBy={[\"date\",\"inventory\", \"model\"]}\n                            className=\"-striped -highlight\"\n                            columns={columns}\n                            defaultPageSize={10}\n                            showPageSizeOptions\n                            sortable={false}\n                            resizable={false}\n                            column={{\n                            ...ReactTableDefaults.column,\n                            headerStyle: {\n                                outline: 'none',\n                            },\n                            }}\n                        />\n                    </div>:''}\n                    \n            </div>\n        )\n    }\n}\n\nexport default Details;\n","export const GOOGLE_OAUTH_KEY = '1046415298486-73kg6eaphd8uutft6peug0b5q2o6qmj1.apps.googleusercontent.com';\n\nexport const WELCOME_TEXT = 'Welcome to Symphony AI Project.';\n\nexport const LOGIN_TEXT = 'Please Login with Google to continue.';\n\nexport const DRAG_DROP_TEXT = 'Drag & drop file here, or click to select file (array-of-objects)!!';","import React, { Component } from 'react';\nimport GoogleLogin from 'react-google-login';\nimport Details from '../json_view/details';\nimport {GOOGLE_OAUTH_KEY, WELCOME_TEXT, LOGIN_TEXT} from '../utils';\nimport './login.scss';\n\nclass Login extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            showUploadPage: false\n        }\n    }\n\n    responseGoogle = (response) => {\n        this.setState({\n            showUploadPage: true\n        })\n    }\n\n    authFailed = (response) =>{\n        alert(\"Something went wrong, Please try Agian!!\");\n        console.log(response);\n    }\n    render() {\n        return (\n            <div>\n                {this.state.showUploadPage?<Details />:\n                    <div className=\"login\">\n                        <div>\n                            {WELCOME_TEXT}\n                        </div>\n\n                        <div>\n                            {LOGIN_TEXT}\n                        </div>\n\n                        <div>\n                            <GoogleLogin\n                                clientId={GOOGLE_OAUTH_KEY}\n                                buttonText=\"Sign In\"\n                                onSuccess={this.responseGoogle}\n                                onFailure={this.authFailed}\n                                cookiePolicy={'single_host_origin'}\n                                className=\"google-login\"\n                            \n                            />\n                        </div>\n                    </div>}\n            </div>\n        )\n    }\n}\n\nexport default Login;\n","import React from 'react';\nimport Login from './components/login/login';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}